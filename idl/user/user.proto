syntax = "proto3";

package user;

// biz/model 
option go_package = "cy.user";

import "api.proto";
import "status.proto";

/*-------------------------------------*/

message LoginReq{
  string login = 1 [(api.vd)="$!=''"];
  string pw = 2 [(api.vd)="$!=''"];

}
message LoginResp{
  status.Code code = 1;
  string errormsg  = 2 ;

  message Data{
    int32 id = 1;
    string username = 2;
    int32 status = 3; 
    string nickname =4;
    string lastname = 5;
    string firstname =6 ;
    string token = 7;
    int32 set_id = 8;
  }
  Data data = 4 ;
}

/*--------------------------------------*/
message RegisterReq{
  
/*
  string phone = 3 ;

  */
  string username = 1 ; 
  string lastName = 2 ;
  string email = 3; 
  string firstName = 4 ;  
  string nickname = 5 ;  
  string password = 6 ;  
  string password1 = 7 ;  
  int32 status = 8 ;  
  string testuser = 9 ;  
  int32 department = 10;  

  /*

  
  string nickname = 7; 
  int32 departmentId = 8;
  int64 startDate = 9 ;
  */
}
message RegisterResp{
  status.Code code= 1;
  string errormsg  = 2 ;
  message Data{
    // string login =1;
    string email = 2 ;
    // string phone = 3 ;
  }
  Data data = 4;
}



/*--------------------------------------*/
message LogoutReq{
  string login = 1 [(api.vd)="$!=''"];
}
message LogoutResp{
  status.Code code= 1;
  string errormsg  = 2 ;
}

/*--------------------------------------*/
/*--------------------------------------*/
message ActiveReq{
  string username = 1 [(api.vd)="$!=''"];
  string code = 2 [(api.vd)="$!=''"];
  string pw1 = 3 [(api.vd)="$!=''"];
  string pw2 = 4 [(api.vd)="$!=''"];
  string phone = 5 ;
}
message ActiveResp{
  status.Code code= 1;
  string errormsg  = 2 ;
}

/*--------------------------------------*/
message ForgetReq{
  string email = 1 [(api.vd)="$!=''"];
}
message ForgetResp{
  status.Code code= 1;
  string errormsg  = 2 ;
}


/*--------------------------------------*/
/*--------------------------------------*/
message ResetReq{
  string email = 1 [(api.vd)="$!=''"];
  string pw1=2 [(api.vd)="$!=''"];
  string pw2=3 [(api.vd)="$!=''"];
  string code=4 [(api.vd)="$!=''"];

}
message ResetResq{
  status.Code code= 1;
  string errormsg  = 2 ;
}


/*--------------------------------------*/


  /*---------------- CRUD ---------------*/
  

  message Subject {
    int32 id = 1;
    string username = 2;
    string firstname = 3;
    string lastname = 4;
    string nickname = 5;
    string password = 6;
    int64 birthday = 7; //@gotags:gorm:"column:unix_timestamp(birthday)"  
    string sex = 8;
    string country = 9;
    string province = 10;
    string city = 11;
    string district = 12;
    string address = 13;
    string address1 = 14;
    string zip = 15;
    string phone = 16;
    string email = 17;
    int64 joindate = 18; //@gotags:gorm:"column:unix_timestamp(joindate)"  
    int64 leavedate = 19; //@gotags:gorm:"column:unix_timestamp(leavedate)"  
    string retire_status = 20;
    int32 status = 21;
    string password1 = 22; 
    int32 department = 23;   //@gotags:structs:"-" gorm:"-"
  }
  /*--------------------------------------*/  
  message ListReq{
    string email = 1 ; 
    string username =2 ;
    string phone =3;
    int32 id = 4 ;
    
    int32 page =  5 [(api.vd)="$>0"];
    int32 perPageItem =6  [(api.vd)="$>0"];
  }
  message ListResp{
    status.Code code = 1;
    string errormsg  = 2 ;
    message Data{
      int32 page =1; 
      int64 totalItem = 2;
      int64 totalPage = 3;
      repeated Subject data = 4;
    }
    Data data = 3 ;
  }
  /*--------------------------------------*/  
  /*--------------------------------------*/  
  message ListDetailsReq{
  int32 id = 1  [(api.vd)="$>0"];  
  
  }
  message ListDetailsResp{
  status.Code code = 1;
  string errormsg  = 2 ;
  Subject data = 3;
  
  }
  
  
  /*--------------------------------------*/  
  message CreateReq{
    Subject data = 1;
  }
  message CreateResp{
  status.Code code = 1;
  string errormsg  = 2 ;
  Subject data = 3;
  }
  /*--------------------------------------*/  
  
  
  
  /*--------------------------------------*/  
  message UpdateReq{
  Subject data = 1;
  }
  message UpdateResp{
  status.Code code = 1;
  string errormsg  = 2 ;
  Subject data = 3;
  }
  /*--------------------------------------*/  
  
  /*--------------------------------------*/  
  message DeleteReq{
    int32 id = 1 [(api.vd)="$>0"]; 
  
  }
  message DeleteResp{
  status.Code code = 1;
  string errormsg  = 2 ;
  Subject data = 3;
  }
  /*--------------------------------------*/  
  
  
/*--------------------------------------*/
message ValidReq{
  string token = 2 [(api.vd)="$!=''"] ;
}

/*--------------------------------------*/

message VerifyReq{

}
message VerifyResp{
  status.Code code = 1;
  string errormsg  = 2 ;
  Subject data = 3;

}
/*--------------------------------------*/
service Controller {

  rpc Login(LoginReq) returns(LoginResp){
    option (api.post) = "/login";
  }
  

  rpc ActiveUser(ActiveReq) returns(ActiveResp){
    option (api.post) = "/user/active";
  }

  rpc ForgetPw(ForgetReq) returns(ForgetResp){
    option (api.post) = "/user/forget-pw";
  }

  rpc ResetPw(ResetReq) returns(ResetResq){
    option (api.post) = "/user/reset-pw";
  }
  rpc ValidToken(ValidReq) returns(LoginResp){
    option (api.post)="/valid-t";
  }


  /*Need JWT---------------------------------------------------*/
  rpc Register(RegisterReq) returns(RegisterResp){
    option (api.post) = "/register";
  }
  rpc Logout(LogoutReq) returns(LogoutResp){
    option (api.post) = "/logout";
  }

  rpc Verify(VerifyReq) returns(VerifyResp){
    option (api.post)="/verify";
  }

  /*------------------------------------*/
  rpc List(ListReq) returns(ListResp){
    option (api.post) = "/user/list";
  }
  rpc Create(CreateReq) returns(CreateResp){
    option (api.post) = "/user/create";
  }
  rpc Update(UpdateReq) returns(UpdateResp){
    option (api.post) = "/user/update";
  }
  rpc Delete(DeleteReq) returns(DeleteResp){
    option (api.post) = "/user/delete";
  }
  rpc ListDetails(ListDetailsReq) returns(ListDetailsResp){
    option (api.post) = "/user/details";
  }

}
